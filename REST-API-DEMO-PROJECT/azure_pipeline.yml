trigger:
  - main  # Runs the pipeline on commits to the main branch

variables:
  JAVA_VERSION: '17'
  MAVEN_GOALS: 'clean test'
  TEST_RESULTS_PATH: 'REST-API-DEMO-PROJECT/target/surefire-reports/TEST-*.xml'

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: BuildAndTest
    timeoutInMinutes: 10 
    steps:
      - checkout: self  # Ensures the repo is cloned

      - script: echo "Running tests"
        displayName: "Start Pipeline"

      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '$(JAVA_VERSION)'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - script: |
          echo "Setting up Maven"
          mvn --version
        displayName: 'Verify Maven Installation'

      - script: ls -la $(System.DefaultWorkingDirectory)
        displayName: 'Check Root Directory'

      - script: ls -la $(System.DefaultWorkingDirectory)/REST-API-DEMO-PROJECT
        displayName: 'Check Project Directory'

      - script: |
          echo "Running tests with Maven"
          cd $(System.DefaultWorkingDirectory)/REST-API-DEMO-PROJECT
          mvn $(MAVEN_GOALS) -T 4
        displayName: 'Run REST Assured Tests'

      - task: Maven@4
        inputs:
          mavenPomFile: 'REST-API-DEMO-PROJECT/pom.xml'
          goals: '$(MAVEN_GOALS)'
          publishJUnitResults: true
          testResultsFiles: '$(TEST_RESULTS_PATH)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '$(JAVA_VERSION)'
          mavenVersionOption: 'Default'

      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '$(TEST_RESULTS_PATH)'
          testRunTitle: 'REST Assured Tests'
        condition: succeededOrFailed()

      - script: |
          cd $(System.DefaultWorkingDirectory)/REST-API-DEMO-PROJECT
          mvn site surefire-report:report-only
        displayName: 'Generate HTML Test Report'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: 'REST-API-DEMO-PROJECT/target/site'
          artifactName: 'HTML-TestReport'

      - script: |
          mkdir -p $(Build.ArtifactStagingDirectory)/logs
          echo "Pipeline logs" > $(Build.ArtifactStagingDirectory)/logs/build.log
        displayName: 'Prepare Logs for Publishing'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/logs'
          artifactName: 'Logs'
        condition: failed()

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            if ("$(Build.SourceBranchName)" -ne "Succeeded") {
              Write-Host "##vso[task.logissue type=error]Build failed! Notify the team."
            }
        condition: failed()
